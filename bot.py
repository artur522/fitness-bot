import os
import logging
import asyncio
import random
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
from datetime import date, timedelta, datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from database import create_tables, get_exercises_by_category, add_exercise, delete_exercise, modify_exercise, add_workout, get_user_stats, get_workout_logs, get_workouts_by_user, delete_workout, delete_all_workouts
from user_profiles import *
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

def escape_markdown_v2(text):
    characters = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return ''.join(f'\\{char}' if char in characters else char for char in str(text))

create_tables()

# –ë–∞–∑–æ–≤—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
BASE_MOTIVATION_MESSAGES = [
    "üí™ –ù–µ –∑–∞–±—ã–≤–∞–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö! –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–º–Ω–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö! –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –Ω–∏–º!",
    "üî• –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π!",
    "üöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    "üåü –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!",
    "üí´ –¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! –î–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–µ–±–µ!",
    "üéØ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∞–µ—à—å —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ —Ö–æ—á–µ—Ç—Å—è!",
    "‚ö° –≠–Ω–µ—Ä–≥–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è! –ù–∞—á–Ω–∏ –∏ —É–≤–∏–¥–∏—à—å!",
]

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
PERSONALIZED_MOTIVATION = {
    'beginner': [
        "üéØ {name}, —Ç—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–∏–µ —É—Å–ø–µ—Ö–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "üåü {name}, –ø–µ—Ä–≤—ã–π —à–∞–≥ —É–∂–µ —Å–¥–µ–ª–∞–Ω! –¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ - –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!",
        "üí´ {name}, –ø–æ–º–Ω–∏: –¥–∞–∂–µ –±–æ–ª—å—à–∏–µ —á–µ–º–ø–∏–æ–Ω—ã –Ω–∞—á–∏–Ω–∞–ª–∏ —Å –º–∞–ª–æ–≥–æ!",
        "üë∂ {name}, –Ω–µ —Å–º–æ—Ç—Ä–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö - —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–º!",
    ],
    'intermediate': [
        "üî• {name}, —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
        "üöÄ {name}, —Ç—ã —É–∂–µ –≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–æ–∏—Ö —É—Å–∏–ª–∏–π!",
        "üèÜ {name}, —Ç–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ —É–≤–∞–∂–µ–Ω–∏—è!",
        "üí™ {name}, —Ç—ã –ø—Ä–µ–æ–¥–æ–ª–µ–ª –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø - —ç—Ç–æ –º–Ω–æ–≥–æ–µ –∑–Ω–∞—á–∏—Ç!",
    ],
    'advanced': [
        "üí™ {name}, —Ç—ã –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö! –ü–æ–∫–∞–∂–∏, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω!",
        "üèãÔ∏è‚Äç‚ôÇÔ∏è {name}, —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç!",
        "üéñ {name}, —Ç—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–Ω–æ–≥–æ–≥–æ! –°—Ç—Ä–µ–º–∏—Å—å –∫ –±–æ–ª—å—à–µ–º—É!",
        "üèÖ {name}, —Ç–≤–æ—è —Å–∏–ª–∞ –≤–æ–ª–∏ –≤–æ—Å—Ö–∏—â–∞–µ—Ç!",
    ]
}

# –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
RANDOM_RESPONSES = [
    "üí™ –û—Ç–ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞! –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è–º–∏!",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ª—ã—à—É —Ç–µ–±—è! –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
    "üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "üöÄ –ö—Ä—É—Ç–æ! –ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!",
    "üåü –ú–æ—Ç–∏–≤–∏—Ä—É–µ—à—å! –°–∞–º –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
    "üí´ –°–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞! –ü—Ä–µ—Ç–≤–æ—Ä—è–π –∏—Ö –≤ –∂–∏–∑–Ω—å!",
    "üéØ –í–µ—Ä—é –≤ —Ç–µ–±—è! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
    "‚ö° –ó–∞—Ä—è–∂–∞–µ—à—å —ç–Ω–µ—Ä–≥–∏–µ–π! –ù–∞–ø—Ä–∞–≤—å –µ—ë –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
]

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
KEYWORD_RESPONSES = {
    '—É—Å—Ç–∞–ª': ["–û—Ç–¥—ã—Ö - —ç—Ç–æ –≤–∞–∂–Ω–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", "–ü–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –∑–∞–ª —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏!", "–£—Å—Ç–∞–ª–æ—Å—Ç—å –ø—Ä–æ–π–¥–µ—Ç, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è!"],
    '–Ω–µ –º–æ–≥—É': ["–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!", "–í–µ—Ä—å –≤ —Å–µ–±—è - —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!", "–ù–µ –º–æ–≥—É - —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å —Å–ª–æ–≤–æ!"],
    '–ª–µ–Ω—å': ["–õ–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", "–ü–æ–±–µ–¥–∏ –ª–µ–Ω—å - —Å—Ç–∞–Ω—å —Å–∏–ª—å–Ω–µ–µ!", "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ - –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–¥–µ—Ç!"],
    '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': ["–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞! –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —ç—Ç–æ –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ª—É—á—à–∏–π –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç!"],
    '–∑–∞–ª': ["–ó–∞–ª –∂–¥–µ—Ç —Ç–µ–±—è!", "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ª–∞ - —Å–µ–π—á–∞—Å!", "–ó–∞–ª - —Ç–≤–æ–π –≤—Ç–æ—Ä–æ–π –¥–æ–º!"],
    '–∫–∞—á–∞—Ç—å—Å—è': ["–ö–∞—á–∞—Ç—å—Å—è - —ç—Ç–æ –∫—Ä—É—Ç–æ!", "–ñ–µ–ª–µ–∑–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç!", "–ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç –≤–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞, –Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∑–∞–ª–µ!"],
    '—Å–ø–æ—Ä—Ç': ["–°–ø–æ—Ä—Ç - —ç—Ç–æ –∂–∏–∑–Ω—å!", "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!", "–°–ø–æ—Ä—Ç –º–µ–Ω—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ, –Ω–æ –∏ –º—ã—à–ª–µ–Ω–∏–µ!"],
    '–¥–∏–µ—Ç–∞': ["–ü–∏—Ç–∞–Ω–∏–µ - 70% —É—Å–ø–µ—Ö–∞!", "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –±–µ–ª–æ–∫!", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ = —Å—É–ø–µ—Ä—Ä–µ–∑—É–ª—å—Ç–∞—Ç!"],
    '–ø—Ä–æ–≥—Ä–µ—Å—Å': ["–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å! –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!", "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ü–µ–ª—è–º!", "–¢—ã —Ä–∞—Å—Ç–µ—à—å - —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ!"],
}

async def track_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    create_or_update_user_profile(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        chat_id=chat_id
    )

def get_personalized_motivation(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    profile = get_user_profile(user_id)
    
    if not profile:
        return random.choice(BASE_MOTIVATION_MESSAGES)
    
    name = profile['first_name'] or "–¥—Ä—É–≥"
    fitness_level = profile['fitness_level']
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    if fitness_level in PERSONALIZED_MOTIVATION:
        message = random.choice(PERSONALIZED_MOTIVATION[fitness_level])
        return message.format(name=name)
    else:
        return random.choice(BASE_MOTIVATION_MESSAGES)

async def send_personalized_motivation(context: ContextTypes.DEFAULT_TYPE, chat_id, user_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if user_id:
        message = get_personalized_motivation(user_id)
        await context.bot.send_message(chat_id=chat_id, text=message)
    else:
        message = random.choice(BASE_MOTIVATION_MESSAGES)
        await context.bot.send_message(chat_id=chat_id, text=message)

async def smart_motivation_scheduler(context: ContextTypes.DEFAULT_TYPE):
    """–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –†–ï–ñ–ï"""
    try:
        users = get_all_users()
        sent_count = 0
        
        # –¢–æ–ª—å–∫–æ 30% —à–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–∂–µ)
        if random.random() < 0.3:
            for user in users:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1-2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ —Ä–∞–∑
                if sent_count < 2 and random.random() < 0.4:
                    await send_personalized_motivation(context, user['chat_id'], user['user_id'])
                    sent_count += 1
                    await asyncio.sleep(1)
        
        if sent_count > 0:
            print(f"‚úÖ Sent personalized motivation to {sent_count} users")
        
    except Exception as e:
        print(f"‚ùå Error in motivation scheduler: {e}")

async def workout_reminder_scheduler(context: ContextTypes.DEFAULT_TYPE):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    try:
        upcoming_workouts = get_upcoming_workouts()
        now = datetime.now()
        
        for workout in upcoming_workouts:
            workout_date = datetime.strptime(workout['next_workout_date'], '%Y-%m-%d %H:%M')
            reminder_time = workout_date - timedelta(hours=workout['reminder_hours_before'])
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            if now >= reminder_time and now < workout_date:
                message = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {workout['first_name']}!\n"
                    f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ {workout['reminder_hours_before']} —á–∞—Å–∞!\n"
                    f"–í—Ä–µ–º—è: {workout_date.strftime('%d.%m –≤ %H:%M')}\n"
                    f"üí™ –ì–æ—Ç–æ–≤—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!"
                )
                await context.bot.send_message(chat_id=workout['chat_id'], text=message)
                print(f"‚úÖ Sent workout reminder to {workout['first_name']}")
        
    except Exception as e:
        print(f"‚ùå Error in workout reminder scheduler: {e}")

async def random_response_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # 20% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–∂–µ)
    if random.random() > 0.2:
        return
    
    message_text = update.message.text.lower()
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await track_user_activity(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    response = None
    for keyword, responses in KEYWORD_RESPONSES.items():
        if keyword in message_text:
            response = random.choice(responses)
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    if not response:
        response = random.choice(RANDOM_RESPONSES)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 40% —Å–ª—É—á–∞–µ–≤
    if random.random() < 0.4 and user.first_name:
        response = f"{user.first_name}, {response.lower()}"
    
    await update.message.reply_text(response)

# –ö–û–ú–ê–ù–î–ê MOTIVATE
async def motivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /motivate - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await track_user_activity(update, context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_personalized_motivation(context, chat_id, user_id)

# –ö–û–ú–ê–ù–î–ê STATISTICS
async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /statistics - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.effective_user.id
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await track_user_activity(update, context)
    
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data='stats_month')],
        [InlineKeyboardButton("üìÖ –ü–æ–ª–≥–æ–¥–∞", callback_data='stats_halfyear')],
        [InlineKeyboardButton("üìÖ –ì–æ–¥", callback_data='stats_year')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='delete_workout')],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]
    ])
    
    if update.message:
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup
        )

# –ö–û–ú–ê–ù–î–ê PROFILE
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    profile = get_user_profile(user_id)
    
    if not profile:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    
    level_names = {
        'beginner': 'üë∂ –ù–∞—á–∏–Ω–∞—é—â–∏–π',
        'intermediate': 'üí™ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'advanced': 'üèÜ –ü—Ä–æ—Ñ–∏'
    }
    
    level = level_names.get(profile['fitness_level'], '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    workout_info = ""
    if profile['next_workout_date']:
        workout_date = datetime.strptime(profile['next_workout_date'], '%Y-%m-%d %H:%M')
        time_left = workout_date - datetime.now()
        if time_left.total_seconds() > 0:
            hours_left = int(time_left.total_seconds() // 3600)
            minutes_left = int((time_left.total_seconds() % 3600) // 60)
            workout_info = f"\nüéØ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_date.strftime('%d.%m –≤ %H:%M')}\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left}—á {minutes_left}–º"
        else:
            workout_info = "\nüéØ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: " + workout_date.strftime('%d.%m –≤ %H:%M')
    
    text = (
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {profile['first_name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"–í —Å–∏—Å—Ç–µ–º–µ —Å: {profile['created_at'][:10]}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile['last_active'][:10]}"
        f"{workout_info}"
    )
    
    await update.message.reply_text(text)

# –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–†–ï–ù–ò–†–û–í–û–ö
async def set_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    user_id = update.effective_user.id
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await track_user_activity(update, context)
    
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üïê –°–µ–≥–æ–¥–Ω—è 19:00", callback_data='workout_today')],
            [InlineKeyboardButton("üïë –ó–∞–≤—Ç—Ä–∞ 19:00", callback_data='workout_tomorrow')],
            [InlineKeyboardButton("üïí –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 19:00", callback_data='workout_dayafter')],
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data='workout_custom')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='workout_cancel')]
        ])
        
        await update.message.reply_text(
            "üéØ –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
            reply_markup=reply_markup
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    try:
        date_str = ' '.join(context.args)
        workout_date = parse_workout_date(date_str)
        
        if workout_date:
            set_next_workout_date(user_id, workout_date.strftime('%Y-%m-%d %H:%M'))
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {workout_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞! ‚è∞"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                "‚Ä¢ /workout —Å–µ–≥–æ–¥–Ω—è 19:00\n"
                "‚Ä¢ /workout –∑–∞–≤—Ç—Ä–∞ 18:00\n"
                "‚Ä¢ /workout 15.12 20:00\n"
                "‚Ä¢ /workout 2024-12-25 20:00"
            )
            
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def workout_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    action = query.data
    
    if action == 'workout_today':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º
        workout_date = datetime.now().replace(hour=19, minute=0, second=0, microsecond=0)
        set_next_workout_date(user_id, workout_date.strftime('%Y-%m-%d %H:%M'))
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 19:00!\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –≤ 17:00 ‚è∞"
        )
        
    elif action == 'workout_tomorrow':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º
        workout_date = (datetime.now() + timedelta(days=1)).replace(hour=19, minute=0, second=0, microsecond=0)
        set_next_workout_date(user_id, workout_date.strftime('%Y-%m-%d %H:%M'))
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00!\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ ‚è∞"
        )
        
    elif action == 'workout_dayafter':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        workout_date = (datetime.now() + timedelta(days=2)).replace(hour=19, minute=0, second=0, microsecond=0)
        set_next_workout_date(user_id, workout_date.strftime('%Y-%m-%d %H:%M'))
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 19:00!\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ ‚è∞"
        )
        
    elif action == 'workout_custom':
        await query.edit_message_text(
            "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è 20:00\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 18:30\n"
            "‚Ä¢ 25.12 19:00\n"
            "‚Ä¢ 2024-12-25 20:00"
        )
        context.user_data['waiting_for_workout_date'] = True
        
    elif action == 'workout_cancel':
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

async def my_workouts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = update.effective_user.id
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await track_user_activity(update, context)
    
    profile = get_user_profile(user_id)
    
    if not profile or not profile['next_workout_date']:
        await update.message.reply_text(
            "üìÖ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /workout —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üí™"
        )
        return
    
    workout_date = datetime.strptime(profile['next_workout_date'], '%Y-%m-%d %H:%M')
    time_left = workout_date - datetime.now()
    
    if time_left.total_seconds() > 0:
        hours_left = int(time_left.total_seconds() // 3600)
        minutes_left = int((time_left.total_seconds() % 3600) // 60)
        time_info = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left}—á {minutes_left}–º"
    else:
        time_info = "‚è∞ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ"
    
    await update.message.reply_text(
        f"üéØ –¢–≤–æ—è —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n"
        f"üìÖ {workout_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"{time_info}\n"
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {profile['reminder_hours_before']} —á–∞—Å–∞\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /workout —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
    )

def parse_workout_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        now = datetime.now()
        date_str = date_str.lower().strip()
        
        if date_str.startswith('—Å–µ–≥–æ–¥–Ω—è'):
            time_part = date_str.replace('—Å–µ–≥–æ–¥–Ω—è', '').strip()
            if not time_part:
                time_part = '19:00'
            time_obj = datetime.strptime(time_part, '%H:%M').time()
            return datetime.combine(now.date(), time_obj)
            
        elif date_str.startswith('–∑–∞–≤—Ç—Ä–∞'):
            time_part = date_str.replace('–∑–∞–≤—Ç—Ä–∞', '').strip()
            if not time_part:
                time_part = '19:00'
            time_obj = datetime.strptime(time_part, '%H:%M').time()
            return datetime.combine(now.date() + timedelta(days=1), time_obj)
            
        elif '.' in date_str:  # –§–æ—Ä–º–∞—Ç DD.MM
            parts = date_str.split()
            date_part = parts[0]
            time_part = parts[1] if len(parts) > 1 else '19:00'
            
            date_obj = datetime.strptime(date_part, '%d.%m').date()
            date_obj = date_obj.replace(year=now.year)
            time_obj = datetime.strptime(time_part, '%H:%M').time()
            return datetime.combine(date_obj, time_obj)
            
        elif '-' in date_str:  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            parts = date_str.split()
            date_part = parts[0]
            time_part = parts[1] if len(parts) > 1 else '19:00'
            
            date_obj = datetime.strptime(date_part, '%Y-%m-%d').date()
            time_obj = datetime.strptime(time_part, '%H:%M').time()
            return datetime.combine(date_obj, time_obj)
            
    except Exception:
        return None
    
    return None

# –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´
async def setup_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    create_or_update_user_profile(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        chat_id=chat_id
    )
    
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë∂ –ù–∞—á–∏–Ω–∞—é—â–∏–π", callback_data='level_beginner')],
        [InlineKeyboardButton("üí™ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data='level_intermediate')],
        [InlineKeyboardButton("üèÜ –ü—Ä–æ—Ñ–∏", callback_data='level_advanced')]
    ])
    
    await update.message.reply_text(
        "üéØ –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=reply_markup
    )

async def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    level = query.data.split('_')[1]
    
    update_user_fitness_level(user_id, level)
    
    level_names = {
        'beginner': '–Ω–∞—á–∏–Ω–∞—é—â–∏–π',
        'intermediate': '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 
        'advanced': '–ø—Ä–æ—Ñ–∏'
    }
    
    await query.edit_message_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {level_names[level]}\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–µ–±—è!"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    chat_id = update.effective_chat.id
    create_or_update_user_profile(user.id, user.username, user.first_name, chat_id)
    
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å", callback_data='chest_biceps')],
        [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∏–Ω–∞ –∏ —Ç—Ä–∏—Ü–µ–ø—Å", callback_data='back_triceps')],
        [InlineKeyboardButton("ü¶µ –ù–æ–≥–∏ –∏ –ø–ª–µ—á–∏", callback_data='legs_shoulders')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics')],
        [InlineKeyboardButton("üéØ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data='my_workouts_menu')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ])
    
    text = (
        "‚ùö‚ñà‚ïê‚ïê‚ñà‚ùö –§–∏—Ç–Ω–µ—Å-–º–æ—Ç–∏–≤–∞—Ç–æ—Ä! ‚ùö‚ñà‚ïê‚ïê‚ñà‚ùö\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "‚Ä¢ üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n"
        "‚Ä¢ üí™ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å\n"
        "‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" –≤ –º–µ–Ω—é
async def my_workouts_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    profile = get_user_profile(user_id)
    
    if not profile or not profile['next_workout_date']:
        await query.edit_message_text(
            "üìÖ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /workout —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üí™",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='do_workout')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
        return
    
    workout_date = datetime.strptime(profile['next_workout_date'], '%Y-%m-%d %H:%M')
    time_left = workout_date - datetime.now()
    
    if time_left.total_seconds() > 0:
        hours_left = int(time_left.total_seconds() // 3600)
        minutes_left = int((time_left.total_seconds() % 3600) // 60)
        time_info = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left}—á {minutes_left}–º"
    else:
        time_info = "‚è∞ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ"
    
    await query.edit_message_text(
        f"üéØ –¢–≤–æ—è —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n"
        f"üìÖ {workout_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"{time_info}\n"
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {profile['reminder_hours_before']} —á–∞—Å–∞\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /workout —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_custom')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (category_handler, display_exercises –∏ —Ç.–¥.)

def main():
    token = os.environ.get('BOT_TOKEN')
    
    if not token:
        logging.error("‚ùå BOT_TOKEN not found in environment variables")
        return
    
    app = ApplicationBuilder().token(token).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setup", setup_user_profile))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CommandHandler("motivate", motivate_command))
    #app.add_handler(CommandHandler("statistics", statistics_command)) - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    app.add_handler(CommandHandler("workout", set_workout))
    app.add_handler(CommandHandler("my_workouts", my_workouts_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    app.add_handler(CallbackQueryHandler(handle_level_selection, pattern='^level_'))
    app.add_handler(CallbackQueryHandler(workout_date_handler, pattern='^workout_'))
    app.add_handler(CallbackQueryHandler(my_workouts_menu_handler, pattern='^my_workouts_menu$'))
    app.add_handler(CallbackQueryHandler(statistics_command, pattern='^statistics$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
        random_response_handler
    ))
    
    # –£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ - –†–ï–ñ–ï (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤)
    app.job_queue.run_repeating(
        smart_motivation_scheduler,
        interval=28800,  # 8 —á–∞—Å–æ–≤
        first=30
    )
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    app.job_queue.run_repeating(
        workout_reminder_scheduler,
        interval=1800,  # 30 –º–∏–Ω—É—Ç
        first=10
    )
    
    logging.info("ü§ñ Smart workout bot started!")
    app.run_polling()

if __name__ == "__main__":
    main()