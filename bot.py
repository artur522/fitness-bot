import os
import logging
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
from datetime import date, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from database import create_tables, get_exercises_by_category, add_exercise, delete_exercise, modify_exercise, add_workout, get_user_stats, get_workout_logs, get_workouts_by_user, delete_workout
import os
from dotenv import load_dotenv
from database import create_tables, get_exercises_by_category, add_exercise, delete_exercise, modify_exercise, add_workout, get_user_stats, get_workout_logs, get_workouts_by_user, delete_workout, delete_all_workouts

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

def escape_markdown_v2(text):
    characters = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return ''.join(f'\\{char}' if char in characters else char for char in str(text))

create_tables()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å", callback_data='chest_biceps')],
        [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∏–Ω–∞ –∏ —Ç—Ä–∏—Ü–µ–ø—Å", callback_data='back_triceps')],
        [InlineKeyboardButton("ü¶µ –ù–æ–≥–∏ –∏ –ø–ª–µ—á–∏", callback_data='legs_shoulders')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ])
    main_menu = ReplyKeyboardMarkup([["/start", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]], resize_keyboard=True)
    text = escape_markdown_v2("‚ùö‚ñà‚ïê‚ïê‚ñà‚ùö –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—á–∞–ª–∫—É! ‚ùö‚ñà‚ïê‚ïê‚ñà‚ùö") + "\n" + escape_markdown_v2("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª:")
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')

async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    default_reps = context.user_data.get('default_reps', 8)
    
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞ –ø–æ–¥—Ö–æ–¥: {default_reps}", callback_data='change_reps')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ])
    
    await query.edit_message_text(
        escape_markdown_v2("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"),
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def change_reps_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['action'] = 'change_reps'
    await query.edit_message_text(
        escape_markdown_v2("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞ –ø–æ–¥—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8, 10, 12):"),
        parse_mode='MarkdownV2'
    )

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mapping = {
        'chest_biceps': "–ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å",
        'back_triceps': "–°–ø–∏–Ω–∞ –∏ —Ç—Ä–∏—Ü–µ–ø—Å",
        'legs_shoulders': "–ù–æ–≥–∏ –∏ –ø–ª–µ—á–∏"
    }
    category = mapping.get(query.data, "–ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å")
    context.user_data['category'] = category
    context.user_data['page'] = 0
    await display_exercises(query, category, context)

async def display_exercises(query, category, context, page=0):
    exercises = get_exercises_by_category(category)
    
    text = f"{get_emoji(category)} *{escape_markdown_v2(category)}*\n\n"
    if not exercises:
        text += escape_markdown_v2("‚õî –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
    else:
        for ex in exercises:
            text += f"‚ñ´ *{escape_markdown_v2(ex[1])}*\n   ‚öñ {escape_markdown_v2(ex[2])}\n{'‚îÄ' * 20}\n"

    buttons = [
        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data='do_workout')],
        [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_exercise')],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='MarkdownV2')

def get_emoji(category):
    return {
        "–ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å": "üí™",
        "–°–ø–∏–Ω–∞ –∏ —Ç—Ä–∏—Ü–µ–ø—Å": "üèãÔ∏è‚Äç‚ôÇÔ∏è",
        "–ù–æ–≥–∏ –∏ –ø–ª–µ—á–∏": "ü¶µ"
    }.get(category, "")

async def edit_exercise_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_exercise')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data='delete_exercise')],
        [InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='modify_exercise')],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]
    ])
    await query.edit_message_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"), reply_markup=reply_markup, parse_mode='MarkdownV2')

async def add_exercise_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['action'] = 'add'
    text = escape_markdown_v2("–í–≤–µ–¥–∏: –ù–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n–ü—Ä–∏–º–µ—Ä: –ñ–∏–º –ª–µ–∂–∞, 70, 75, 75")
    await query.edit_message_text(text, parse_mode='MarkdownV2')

async def delete_exercise_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = context.user_data.get('category')
    exercises = get_exercises_by_category(category)
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚Ä¢ {escape_markdown_v2(ex[1])}", callback_data=f'delete_{ex[0]}')] for ex in exercises
    ] + [[InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]])
    await query.edit_message_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"), reply_markup=reply_markup, parse_mode='MarkdownV2')

async def confirm_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    exercise_id = int(query.data.split('_')[1])
    delete_exercise(exercise_id)
    await query.edit_message_text(
        escape_markdown_v2("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!"),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úî –û–ö", callback_data='back_to_cat')]]),
        parse_mode='MarkdownV2'
    )

async def modify_exercise_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = context.user_data.get('category')
    exercises = get_exercises_by_category(category)
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚Ä¢ {escape_markdown_v2(ex[1])}", callback_data=f'modify_{ex[0]}')] for ex in exercises
    ] + [[InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]])
    await query.edit_message_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"), reply_markup=reply_markup, parse_mode='MarkdownV2')

async def confirm_modify_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    exercise_id = int(query.data.split('_')[1])
    context.user_data['exercise_id'] = exercise_id
    context.user_data['action'] = 'modify'
    category = context.user_data.get('category')
    exercises = get_exercises_by_category(category)
    exercise = next((ex for ex in exercises if ex[0] == exercise_id), None)
    text = escape_markdown_v2(f"–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è '{exercise[1]}' (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n–ü—Ä–∏–º–µ—Ä: 70, 75, 75")
    await query.edit_message_text(text, parse_mode='MarkdownV2')

async def workout_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = context.user_data.get('category')
    exercises = get_exercises_by_category(category)
    if not exercises:
        await query.edit_message_text(escape_markdown_v2("‚õî –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ—Ç."), parse_mode='MarkdownV2')
        return
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{escape_markdown_v2(ex[1])}", callback_data=f'workout_{ex[0]}')] for ex in exercises
    ] + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_cat')]])
    await query.edit_message_text(
        escape_markdown_v2(f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({category}):"),
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def select_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    ex_id = int(query.data.split('_')[1])
    category = context.user_data['category']
    exercises = get_exercises_by_category(category)
    exercise = next((ex for ex in exercises if ex[0] == ex_id), None)
    if not exercise:
        await query.edit_message_text("‚õî –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    context.user_data['exercise'] = exercise
    context.user_data['sets'] = []
    
    weights = [w.strip() for w in exercise[2].split(',')]
    buttons = [[InlineKeyboardButton(f"{w} –∫–≥", callback_data=f'addset_{w}')] for w in weights]
    buttons.append([InlineKeyboardButton("‚ûï –°–≤–æ–π –≤–µ—Å", callback_data='custom_weight')])
    buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish_sets')])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='do_workout')])
    
    await query.edit_message_text(
        f"üèã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise[1]}\n\n"
        f"–û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:\n"
        f"–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥–æ–≤\n\n"
        f"–í—ã–±–µ—Ä–∏ –≤–µ—Å ‚Äî –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ = –ø–æ–¥—Ö–æ–¥ üí•\n"
        f"–ù–∞–∂–º–∏ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def add_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    weight = float(query.data.split('_')[1])
    sets = context.user_data.get('sets', [])
    sets.append(weight)
    context.user_data['sets'] = sets
    exercise = context.user_data['exercise']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥–æ–≤ (–±–µ–∑ Markdown)
    sets_text = ""
    for i, set_weight in enumerate(sets, 1):
        sets_text += f"{i}. {set_weight} –∫–≥\n"
    
    buttons = [[InlineKeyboardButton(f"{w} –∫–≥", callback_data=f'addset_{w}')]
               for w in exercise[2].split(',')]
    buttons.append([InlineKeyboardButton("‚ûï –°–≤–æ–π –≤–µ—Å", callback_data='custom_weight')])
    buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish_sets')])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='do_workout')])
    
    await query.edit_message_text(
        f"üèã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise[1]}\n\n"
        f"–û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:\n"
        f"{sets_text}\n"
        f"–í—ã–±–µ—Ä–∏ –≤–µ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def custom_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(escape_markdown_v2("–í–≤–µ–¥–∏ –≤–µ—Å (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 75):"), parse_mode='MarkdownV2')
    context.user_data['action'] = 'custom_weight'

async def finish_sets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    exercise = context.user_data.get('exercise')
    sets = context.user_data.get('sets', [])
    if not sets:
        await query.edit_message_text(escape_markdown_v2("‚ùó –ü–æ–¥—Ö–æ–¥—ã –Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã."), parse_mode='MarkdownV2')
        return
    
    default_reps = context.user_data.get('default_reps', 8)
    category = context.user_data.get('category')
    
    for weight in sets:
        add_workout(0, exercise[1], default_reps, weight, category) # user_id = 0
    
    weights_str = ', '.join(escape_markdown_v2(str(w)) for w in sets)
    
    saved_category = context.user_data.get('category')
    context.user_data.clear()
    context.user_data['category'] = saved_category
    
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_cat')]])
    await query.edit_message_text(
        f"{escape_markdown_v2('‚úÖ')} *{escape_markdown_v2(exercise[1])}*\n\n"
        f"{escape_markdown_v2(f'–ü–æ–¥—Ö–æ–¥–æ–≤: {len(sets)}')}\n"
        f"{escape_markdown_v2(f'–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞ –ø–æ–¥—Ö–æ–¥: {default_reps}')}\n"
        f"{escape_markdown_v2(f'–í–µ—Å–∞:')} {weights_str} {escape_markdown_v2('–∫–≥')}",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if 'stat_messages' in context.user_data:
        for msg_id in context.user_data['stat_messages']:
            try:
                await query.message.chat.delete_message(msg_id)
            except Exception as e:
                logging.warning(f"Failed to delete message {msg_id}: {str(e)}")
        context.user_data['stat_messages'] = []
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data='stats_month')],
        [InlineKeyboardButton("üìÖ –ü–æ–ª–≥–æ–¥–∞", callback_data='stats_halfyear')],
        [InlineKeyboardButton("üìÖ –ì–æ–¥", callback_data='stats_year')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='delete_workout')],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='back')]
    ])
    await query.edit_message_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"), reply_markup=reply_markup, parse_mode='MarkdownV2')

async def delete_workout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    start_date = (date.today() - timedelta(days=365)).isoformat()
    end_date = date.today().isoformat()
    workouts = get_workouts_by_user(0, start_date, end_date) # user_id = 0
    if not workouts:
        await query.edit_message_text(
            escape_markdown_v2("‚õî –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='statistics')]]),
            parse_mode='MarkdownV2'
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    buttons = []
    for workout in workouts:
        workout_id, exercise_name, weight, reps, workout_date = workout
        button_text = f"{escape_markdown_v2(exercise_name)}: {escape_markdown_v2(weight)} –∫–≥, {reps} –ø–æ–≤—Ç., {escape_markdown_v2(workout_date)}"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f'delete_workout_{workout_id}')])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    buttons.append([InlineKeyboardButton("üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–ê–ü–ò–°–ò", callback_data='delete_all_workouts')])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='statistics')])
    
    await query.edit_message_text(
        escape_markdown_v2("–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏ –≤—Å–µ:"),
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='MarkdownV2'
    )
    
async def delete_all_workouts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–Å", callback_data='confirm_delete_all')],
        [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data='delete_workout')]
    ])
    
    await query.edit_message_text(
        escape_markdown_v2("‚ö†Ô∏è –í–´ –£–í–ï–†–ï–ù–´? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"),
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )
    
async def confirm_delete_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    delete_all_workouts()
    
    await query.edit_message_text(
        escape_markdown_v2("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='statistics')]]),
        parse_mode='MarkdownV2'
    )

async def confirm_delete_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    workout_id = int(query.data.split('_')[2])
    delete_workout(workout_id)
    await query.edit_message_text(
        escape_markdown_v2("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!"),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úî –û–ö", callback_data='statistics')]]),
        parse_mode='MarkdownV2'
    )

async def display_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    period = query.data.split('_')[1]
    if period == 'month':
        start_date = (date.today() - timedelta(days=30)).isoformat()
        period_text = "–∑–∞ –º–µ—Å—è—Ü"
    elif period == 'halfyear':
        start_date = (date.today() - timedelta(days=180)).isoformat()
        period_text = "–∑–∞ –ø–æ–ª–≥–æ–¥–∞"
    else:
        start_date = (date.today() - timedelta(days=365)).isoformat()
        period_text = "–∑–∞ –≥–æ–¥"
    end_date = date.today().isoformat()
    categories = ["–ì—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å", "–°–ø–∏–Ω–∞ –∏ —Ç—Ä–∏—Ü–µ–ø—Å", "–ù–æ–≥–∏ –∏ –ø–ª–µ—á–∏"]
    stat_messages = []
    for cat in categories:
        text = get_user_stats(0, start_date, end_date, cat) # user_id = 0
        exercises = get_exercises_by_category(cat)
        media = []
        for ex in exercises:
            logs = get_workout_logs(0, ex[1], start_date, end_date, cat) # user_id = 0
            if logs:
                graph = generate_progress_graph(ex[1], logs, period_text)
                if graph:
                    media.append(InputMediaPhoto(media=graph, caption=escape_markdown_v2(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {ex[1]} {period_text}"), parse_mode='MarkdownV2'))
        if media:
            media_group = await query.message.reply_media_group(media=media)
            stat_messages.extend([msg.message_id for msg in media_group])
        if text != escape_markdown_v2(f"‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat}."):
            text_message = await query.message.reply_text(text, parse_mode='MarkdownV2')
            stat_messages.append(text_message.message_id)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='statistics')]])
    final_message = await query.message.reply_text(
        escape_markdown_v2("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"),
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )
    stat_messages.append(final_message.message_id)
    context.user_data['stat_messages'] = stat_messages

def generate_progress_graph(exercise_name, logs, period_text):
    if not logs:
        return None
    dates = [log[0] for log in logs]
    weights = [log[1] for log in logs]
    plt.figure(figsize=(8, 4))
    plt.plot(dates, weights, marker='o', linestyle='-', color='#1f77b4')
    plt.title(escape_markdown_v2(f'–ü—Ä–æ–≥—Ä–µ—Å—Å: {exercise_name}'))
    plt.xlabel(escape_markdown_v2('–î–∞—Ç–∞'))
    plt.ylabel(escape_markdown_v2('–í–µ—Å (–∫–≥)'))
    plt.xticks(rotation=45, fontsize=10)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100)
    buf.seek(0)
    plt.close()
    return buf

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get('action')
    user_id = update.effective_user.id
    category = context.user_data.get('category')
    try:
        if action == 'custom_weight':
            weight = float(update.message.text.strip())
            sets = context.user_data.get('sets', [])
            sets.append(weight)
            context.user_data['sets'] = sets
            context.user_data['action'] = None
            exercise = context.user_data['exercise']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥–æ–≤ (–±–µ–∑ Markdown)
            sets_text = ""
            for i, set_weight in enumerate(sets, 1):
                sets_text += f"{i}. {set_weight} –∫–≥\n"
            
            buttons = [[InlineKeyboardButton(f"{w} –∫–≥", callback_data=f'addset_{w}')]
                       for w in exercise[2].split(',')]
            buttons.append([InlineKeyboardButton("‚ûï –°–≤–æ–π –≤–µ—Å", callback_data='custom_weight')])
            buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish_sets')])
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='do_workout')])
            
            await update.message.reply_text(
                f"üèã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise[1]}\n\n"
                f"–û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:\n"
                f"{sets_text}\n"
                f"–í—ã–±–µ—Ä–∏ –≤–µ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        elif action == 'add':
            if 'new_exercise' not in context.user_data:
                context.user_data['new_exercise'] = update.message.text.strip()
                await update.message.reply_text(
                    escape_markdown_v2(f"–í–≤–µ–¥–∏ –≤–µ—Å–∞ –¥–ª—è '{context.user_data['new_exercise']}' (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n–ü—Ä–∏–º–µ—Ä: 70, 75, 75"),
                    parse_mode='MarkdownV2'
                )
            else:
                weights = [float(w.strip()) for w in update.message.text.split(',')]
                new_exercise = context.user_data['new_exercise']
                add_exercise(category, new_exercise, ', '.join(map(str, weights)))
                weight_str = ', '.join(map(str, weights))
                await update.message.reply_text(
                    f"{escape_markdown_v2(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {new_exercise} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {weight_str} –∫–≥')} ‚úÖ",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úî –û–ö", callback_data='back_to_cat')]]),
                    parse_mode='MarkdownV2'
                )
                context.user_data['action'] = None
                context.user_data.pop('new_exercise', None)
        elif action == 'modify':
            weights = [float(w.strip()) for w in update.message.text.split(',')]
            modify_exercise(context.user_data['exercise_id'], ', '.join(map(str, weights)))
            weight_str = ', '.join(map(str, weights))
            await update.message.reply_text(
                f"{escape_markdown_v2(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {weight_str} –∫–≥')} ‚úÖ",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úî –û–ö", callback_data='back_to_cat')]]),
                parse_mode='MarkdownV2'
            )
            context.user_data['action'] = None
            context.user_data.pop('exercise_id', None)
    except ValueError:
        await update.message.reply_text(escape_markdown_v2("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75 –∏–ª–∏ 70, 75, 75)."), parse_mode='MarkdownV2')

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

async def back_to_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await display_exercises(query, context.user_data.get('category'), context)

async def back_to_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await statistics_handler(update, context)

def main():
    token = os.environ.get('BOT_TOKEN')
    
    if not token:
        logging.error("‚ùå BOT_TOKEN not found in environment variables")
        print("‚ùå BOT_TOKEN not found in environment variables")
        return
    
    app = ApplicationBuilder().token(token).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(settings_handler, pattern='^settings$'))
    app.add_handler(CallbackQueryHandler(change_reps_handler, pattern='^change_reps$'))
    app.add_handler(CallbackQueryHandler(category_handler, pattern='^(chest_biceps|back_triceps|legs_shoulders)$'))
    app.add_handler(CallbackQueryHandler(edit_exercise_handler, pattern='^edit_exercise$'))
    app.add_handler(CallbackQueryHandler(add_exercise_handler, pattern='^add_exercise$'))
    app.add_handler(CallbackQueryHandler(delete_exercise_handler, pattern='^delete_exercise$'))
    app.add_handler(CallbackQueryHandler(confirm_delete_handler, pattern='^delete_\\d+$'))
    app.add_handler(CallbackQueryHandler(modify_exercise_handler, pattern='^modify_exercise$'))
    app.add_handler(CallbackQueryHandler(confirm_modify_handler, pattern='^modify_\\d+$'))
    app.add_handler(CallbackQueryHandler(workout_menu, pattern='^do_workout$'))
    app.add_handler(CallbackQueryHandler(select_weight, pattern='^workout_\\d+$'))
    app.add_handler(CallbackQueryHandler(add_set, pattern='^addset_'))
    app.add_handler(CallbackQueryHandler(custom_weight, pattern='^custom_weight$'))
    app.add_handler(CallbackQueryHandler(finish_sets, pattern='^finish_sets$'))
    app.add_handler(CallbackQueryHandler(statistics_handler, pattern='^statistics$'))
    app.add_handler(CallbackQueryHandler(delete_workout_handler, pattern='^delete_workout$'))
    app.add_handler(CallbackQueryHandler(confirm_delete_workout, pattern='^delete_workout_\\d+$'))
    app.add_handler(CallbackQueryHandler(delete_all_workouts_handler, pattern='^delete_all_workouts$'))
    app.add_handler(CallbackQueryHandler(confirm_delete_all_handler, pattern='^confirm_delete_all$'))
    app.add_handler(CallbackQueryHandler(delete_all_workouts_handler, pattern='^delete_all_workouts$'))
    app.add_handler(CallbackQueryHandler(confirm_delete_all_handler, pattern='^confirm_delete_all$'))
    app.add_handler(CallbackQueryHandler(display_stats, pattern='^stats_(month|halfyear|year)$'))
    app.add_handler(CallbackQueryHandler(back, pattern='^back$'))
    app.add_handler(CallbackQueryHandler(back_to_cat, pattern='^back_to_cat$'))
    app.add_handler(CallbackQueryHandler(back_to_stats, pattern='^stats_cat$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    
    logging.info("Bot started!")
    app.run_polling()

if __name__ == "__main__":
    main()